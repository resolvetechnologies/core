// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";

/**
 * @title Kaiketsu governance token
 * @dev Kaiketsu's native token that represents ownership shares of Kaiketsu.
 * Token holders are entitled to a share of profits generated by the protocol and to participation in DAO governance.
 */
contract Lysi is ERC20, ERC20Burnable, ERC20Permit, ERC20Votes {
    constructor(address developmentFund) ERC20("Remedy", "Lysi") ERC20Permit("Remedy") {
        // Mint entire supply to Kaiketsu Development Fund for liquidity bootstrapping.
        _mint(developmentFund, 10000000 * 10 ** decimals()); // 10 Million
    }

    // Overriding internal functions for ERC20Votes support
    function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {
        super._afterTokenTransfer(from, to, amount);
    }

    function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {
        super._mint(to, amount);
    }

    function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {
        super._burn(account, amount);
    }
}